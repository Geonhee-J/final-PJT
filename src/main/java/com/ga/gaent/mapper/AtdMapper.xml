<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ga.gaent.mapper.AtdMapper">

    <!-- 출퇴근확인 -->
    <select id="checkAtdStatus" parameterType="String" resultType="com.ga.gaent.dto.AtdDTO">
        SELECT 
            t.atd_num atdNum,
            t.emp_code empCode,
            TIME(t.atd_in_time) inTime,
            TIME(t.atd_out_time) outTime,
            CONCAT(
                FLOOR(a.weekly_work_minutes / 60), '시간 ',
                a.weekly_work_minutes % 60, '분'
            ) weeklyWorkTime
        FROM 
            attendance t
        JOIN (
            SELECT 
                emp_code,
                WEEK(atd_in_time, 1) AS week_num,
                SUM(TIMESTAMPDIFF(MINUTE, atd_in_time, IFNULL(atd_out_time, NOW() ) ) ) weekly_work_minutes
            FROM 
                attendance
            GROUP BY 
                emp_code,
                YEAR(atd_in_time),
                WEEK(atd_in_time, 1)
        ) a ON t.emp_code = a.emp_code AND a.week_num = WEEK(CURDATE(), 1)
        WHERE
            t.emp_code = #{empCode} AND
            DATE(t.atd_in_time) = CURDATE()
        ORDER BY 
            t.atd_in_time DESC
    </select>
    
    <!-- 출근하기 -->
    <insert id="atdIn" parameterType="String">
        INSERT INTO 
            attendance
            ( emp_code, atd_in_time , atd_date)
        VALUES( 
            #{empCode}, NOW(), CURDATE() )
    </insert>
    
    <!-- 퇴근하기 -->
    <update id="atdOut" parameterType="String">
        UPDATE 
            attendance
        SET 
            atd_out_time = NOW()
        WHERE
            emp_code = #{empCode} AND
            atd_in_Time IS NOT NULL
    </update>
    
    <!-- 출퇴근이력 -->
    <select id="selectAtdHistory" parameterType="map" resultType="com.ga.gaent.dto.AtdDTO">
        SELECT 
           atd_num atdNum,
           emp_code empCode,
           CASE
               WHEN atd_in_time IS NOT NULL
                   THEN DATE_FORMAT(atd_in_time, '%H시%i분%s초')
               ELSE '출근하지 않았습니다'
           END AS inTime,
           CASE
               WHEN atd_in_time IS NOT NULL
                   THEN DATE_FORMAT(atd_out_time, '%H시%i분%s초')
               ELSE '출근하지 않았습니다'
           END AS outTime,
           DATE_FORMAT(atd_date, '%Y') AS year,
           DATE_FORMAT(atd_date, '%m') AS month,
           DATE_FORMAT(atd_date, '%d') AS day,
           CASE
               WHEN atd_in_time IS NULL THEN '결근'
               WHEN TIME(atd_in_time) > '09:00:00' THEN '지각'
               WHEN '18:00:00' > TIME(atd_out_time) THEN '조퇴'
               ELSE '출근'
           END AS atdStatus
        FROM 
           attendance
        WHERE
            emp_code = #{empCode} AND
            YEAR(atd_date) = #{year} AND
            MONTH(atd_date) = #{month}
    </select>
    
    <!-- 일간 근무 시간 계산 -->
    <select id="dailyWorkMinutes">
        SELECT 
            TIMESTAMPDIFF(MINUTE, atd_in_time, IFNULL( atd_out_time, NOW() ) ) dailyWorkMinutes 
        FROM 
            attendance
        WHERE 
            DATE(atd_in_time) = CURDATE()
            AND emp_code = #{empCode}
    </select>
    <!-- 주간 근무 시간 계산 -->
    <select id="weeklyWorkMinutes">
        SELECT 
            a.weekly_work_minutes weeklyWorkMinutes
        FROM
            (
            SELECT
                WEEK(atd_in_time, 1) AS week_num,
                SUM(TIMESTAMPDIFF(MINUTE, atd_in_time, IFNULL(atd_out_time, NOW() ) ) ) AS weekly_work_minutes
            FROM
                attendance
            WHERE
                emp_code= #{empCode}
            GROUP BY
                YEAR(atd_in_time),
                WEEK(atd_in_time, 1)
            )a
        WHERE a.week_num = WEEK(CURDATE(), 1)
    </select>
    <!-- 월간 근무 시간 계산 -->
    <select id="monthlyWorkMinutes">
        SELECT a.monthly_work_minutes AS monthlyWorkMinutes
        FROM (
            SELECT
                MONTH(atd_in_time) AS month_num,
                SUM(TIMESTAMPDIFF(MINUTE, atd_in_time, IFNULL(atd_out_time, NOW() ) ) ) AS monthly_work_minutes
            FROM 
                attendance
            WHERE 
                emp_code = #{empCode}
            GROUP BY 
                emp_code,
                YEAR(atd_in_time),
                MONTH(atd_in_time)
            ) a
        WHERE a.month_num = MONTH(CURDATE())
    </select>
    
    
    
    <select id="selectAtdStatusCount" parameterType="map" resultType="map">
        SELECT
            emp_code,
            COUNT(CASE 
                  WHEN atd_in_time IS NULL THEN 1 
                  ELSE NULL 
              END) AS absenceCount, 
            COUNT(CASE 
                  WHEN atd_in_time IS NOT NULL AND TIME(atd_in_time) > '09:00:00' THEN 1 
                  ELSE NULL 
              END) AS lateCount,   
            COUNT(CASE 
                  WHEN atd_in_time IS NOT NULL AND '18:00:00' > TIME(atd_out_time) THEN 1 
                  ELSE NULL 
              END) AS earlyLeaveCount,
            COUNT(CASE 
                  WHEN atd_in_time IS NOT NULL AND atd_out_time IS NOT NULL THEN 1 
                  ELSE NULL 
              END) AS attendanceCount 
        FROM 
            attendance
        WHERE
            emp_code = #{empCode} AND
            YEAR(atd_date) = #{year} AND
            MONTH(atd_date) = #{month}
    </select>
    
  
    
    <insert id="autoRegisterAtd">
        INSERT INTO attendance (
            emp_code, 
            atd_in_time, 
            atd_out_time,
            atd_date
        )
            SELECT
                e.emp_code,
                NULL,
                NULL,
                CURDATE()
            FROM
                emp e
            LEFT JOIN (
                SELECT emp_code, atd_in_time
                FROM attendance
                WHERE DATE(atd_in_time) = CURDATE()
            ) a ON e.emp_code = a.emp_code
        WHERE a.atd_in_time IS NULL
    </insert>
    
    <update id="autoGetOffWork">
        UPDATE 
            attendance 
        SET
            atd_out_time = CONCAT(CURDATE(), ' 18:00:00') 
        WHERE 
            atd_date = CURDATE() AND 
            atd_out_time IS NULL
    </update>
    
    <select id="selectTeamAtdStatus"  parameterType="map" resultType="map">
    SELECT 
        a.atd_num AS atdNum,
        e.emp_code AS empCode,
        e.emp_kor_name AS empName,
        e.team_code AS teamCode,
        DATE_FORMAT(a.atd_date, '%y년 %m월 %d일' ) AS atdDate,
        CASE
            WHEN a.atd_in_time IS NOT NULL AND a.atd_in_time != a.atd_out_time
                THEN DATE_FORMAT(a.atd_in_time, '%H시%i분')
            ELSE a.atd_in_time
        END AS inTime,
        CASE
            WHEN a.atd_in_time IS NOT NULL AND a.atd_in_time != a.atd_out_time
                THEN DATE_FORMAT(a.atd_out_time, '%H시%i분')
            ELSE a.atd_out_time
        END AS outTime,
        DATE_FORMAT(a.atd_in_time, '%Y') AS year,
        DATE_FORMAT(a.atd_in_time, '%m') AS month,
        DATE_FORMAT(a.atd_in_time, '%d') AS day,
        DATE_FORMAT(a.atd_in_time, '%w') AS yoil,
        CASE
            WHEN a.atd_in_time IS NULL OR a.atd_in_time = a.atd_out_time THEN '결근'
            WHEN TIME(a.atd_in_time) > '09:00:00' THEN '지각'
            WHEN '18:00:00' > TIME(a.atd_out_time) THEN '조퇴'
            ELSE '출근'
        END AS atdStatus
    FROM 
        emp e
    JOIN 
        attendance a ON e.emp_code = a.emp_code
    WHERE
        YEAR(a.atd_date) = '2024' AND
        WEEK(a.atd_date,1) = #{week} and
        e.team_code = #{teamCode} 
     ORDER BY
        teamCode ASC,
        empCode ASC,
        yoil ASC
    </select>
    
    <select id="selectTeamAtdStatusCount" parameterType="map" resultType="map">
        SELECT
           COUNT(CASE 
                 WHEN a.atd_in_time IS NULL AND a.atd_out_time IS NULL THEN 1 
                 ELSE NULL 
             END) AS absenceCount, 
           COUNT(CASE 
                 WHEN a.atd_in_time IS NOT NULL AND TIME(a.atd_in_time) > '09:00:00' AND a.atd_out_time IS NOT NULL THEN 1 
                 ELSE NULL 
             END) AS lateCount,   
           COUNT(CASE 
                 WHEN a.atd_in_time IS NOT NULL AND '18:00:00' > TIME(a.atd_out_time) THEN 1 
                 ELSE NULL 
             END) AS earlyLeaveCount,
           COUNT(CASE 
                 WHEN a.atd_in_time IS NOT NULL AND a.atd_out_time IS NOT NULL THEN 1 
                 ELSE NULL 
             END) AS attendanceCount 
        FROM 
           emp e LEFT JOIN attendance a ON e.emp_code = a.emp_code
        WHERE
           e.team_code = #{teamCode} AND
           YEAR(a.atd_date) = '2024' AND
           WEEK(a.atd_date,1) = #{week}
    </select>
    
    
</mapper>
